security:
    password_hashers:
        App\Core\Persistence\Entity\User:
            algorithm: 'auto'
    providers:
        app_user_provider:
            entity:
                class: App\Core\Persistence\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        authorization:
            pattern: ^/api/v(\d+)/authorization/login
            stateless: true
            lazy: true
            provider: app_user_provider

            json_login:
                check_path: v1_authorization_login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        admin:
            pattern: ^/admin
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AdminAuthenticator
            logout:
                path: admin_logout
                target: admin_login
            access_denied_handler: App\Security\AdminAccessDeniedHandler

        main:
            lazy: true
            provider: app_user_provider
            jwt: ~
            entry_point: jwt
            refresh_jwt:
                check_path: v1_authorization_refresh_token
            logout:
                path: v1_authorization_logout

    access_control:
        - { path: ^/api/v(\d+)/authorization/(login|register|restore_password|check_reset_token|change_password|refresh_token), roles: PUBLIC_ACCESS }
        - { path: ^/api/v(\d+)/init, roles: PUBLIC_ACCESS }
        - { path: ^/api/v(\d+)/entity/search, roles: PUBLIC_ACCESS }
        - { path: ^/admin/(login|logout), roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/admin, roles: ROLE_ADMIN }

when@test:
    security:
        password_hashers:
            App\Core\Persistence\Entity\User:
                algorithm: plaintext
